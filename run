#!/bin/bash
# :: run
################################################
# Quality-of-life tooling for the repo.
# Think of it like npm scripts, but via bash.
################################################
# :: Created By: Benji Brandt <benjibrandt@ucla.edu>
# :: Creation Date: 10 October 2019

##############################################
# CONSTANTS
##############################################
readonly USAGE_MSG="~~~\n\
run is a utility to speed up work.\n\
Think of it like \`npm run\`, but via bash.\n\
~~~\n\
The only valid options, at present, are:\n\
\t1) b|build: builds the docker containers for a local instance of the app.\n\
\t2) s|start: starts the local version of the app. Equivalent to \'docker-compose up\'. Must have run --build first, or a failure will occur.\n\
\t\ta) d|detached: if specified alongside start, will run the docker container in detached mode.\n\
\t3) h|halt|stop: stop the local version of the app. Equivalent to \'docker-compose down\'.\n\
\t4) t|tidy: does a light-touch clean of some dependencies, leaving Docker volumes intact.\n\
\t5) c|clean: does a full-blown clean of the setup, removing everything brought in by build and start.\n\
\t6) a|armageddon: does a full-blown clean of docker, removing all stopped containers.\n\
\t7) u|usage: display this usage message.\n\
\n\
"
readonly whispr_web="whispr_web"

##############################################
# ARGUMENT PARSING
##############################################
POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"
case $key in
    b|build)
        BUILD=true
        option_set=true
        shift # past argument
    ;;
    s|start)
        START=true
        option_set=true
        shift
    ;;
    d|detached)
        DETACHED=true
        option_set=true
        shift
    ;;
    h|halt|stop)
        HALT=true
        option_set=true
        shift
    ;;
    t|tidy)
        TIDY=true
        option_set=true
        shift
    ;;
    c|clean)
        CLEAN=true
        option_set=true
        shift
    ;;
    a|armageddon)
        ARMAGEDDON=true
        option_set=true
        shift
    ;;
    u|usage)
        printf "$USAGE_MSG"
        exit 0
    ;;
    *) # unknown option
        printf "$1 is an invalid option.\n"
        exit 1
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

##############################################
# FUNCTIONS
##############################################

# @param: the variable to check for validity
isValid? ()
{
    if ! [[ -z ${1} ]]; then
        return 0
    fi

    return 1
}

exitIfCmdConflictsWithStart ()
{
    if isValid? $CLEAN || isValid? $TIDY || isValid? $HALT || isValid? $ARMAGEDDON; then
        if isValid? $CLEAN; then 
            offender="clean"
        elif isValid? $ARMAGEDDON; then
            offender="armageddon"
        else 
            isValid? $TIDY && offender="tidy" || offender="stop" 
        fi
        echo "The start option cannot be specified with $offender. Please rethink your command and try again."
        exit 1
    fi
}

updateGemFiles ()
{
    docker cp Gemfile $whispr_web:/whispr/ || echo "Failed to update Gemfile in container $whispr_web..."
    docker cp Gemfile.lock $whispr_web:/whispr/ || echo "Failed to update Gemfile.lock in container $whispr_web..."
    docker-compose run web bundle install
}

##############################################
# MAIN
##############################################

main ()
{
    if isValid? $DETACHED && ! isValid? $START; then
        echo "You cannot specify detached without specifying start."
        exit 1
    fi

    if ! isValid? $option_set; then
        echo "You must specify a valid option to use run."
        printf "$USAGE_MSG"
        exit 1
    fi

    if isValid? $BUILD; then
        echo "Building container..."
        docker-compose build && docker-compose run web rake db:create db:setup || (echo "run build encountered an error. See output above." && exit 1)
    fi

    if isValid? $START; then
        exitIfCmdConflictsWithStart
        echo "Starting container..."
        if isValid? $DETACHED; then
            docker-compose up --detach || (echo "run start encountered an error. See output above." && exit 1)
        else
            docker-compose up || (echo "run start encountered an error. See output above." && exit 1)
        fi
        # TODO(benjibrandt): this is jenky and doesn't really work. Fix it.
        # echo "Ensuring gems are up-to-date..."
        # updateGemFiles
    fi

    if isValid? $HALT; then
        echo "Stopping container..."
        docker-compose stop || (echo "run stop encountered an error. See output above." && exit 1)
    fi

    if isValid? $TIDY; then
        if isValid? $CLEAN || isValid? $ARMAGEDDON; then
            if isValid? $CLEAN && isValid? $ARMAGEDDON; then
                echo "Clean, armageddon and tidy specified. Will opt for the less-severe tidy."
            else
                isValid? $ARMAGEDDON && cleaner="armageddon" || cleaner="clean"
                echo "Both $cleaner and tidy specified. Will opt for the less-severe tidy."
            fi
        fi
        echo "Tidying up..."
        docker-compose stop
        docker-compose down || (echo "run tidy encountered an error. See output above." && exit 1)
    elif isValid? $CLEAN || isValid? $ARMAGEDDON; then
        if isValid? $CLEAN && isValid? $ARMAGEDDON; then
            echo "Armageddon and clean both specified. Will opt for less-severe clean."
            unset ARMAGEDDON
        fi
        isValid? $ARMAGEDDON && cleaner="armageddon" || cleaner="clean"
        isValid? $ARMAGEDDON && echo "Commencing armageddon clean..." || echo "Cleaning up..."
        docker-compose stop || (echo "run $cleaner encountered an error. See output above." && exit 1)
        docker-compose down --volumes --remove-orphans || (echo "run $cleaner encountered an error. See output above." && exit 1)
        if isValid? $ARMAGEDDON; then docker container prune -f || (echo "run armageddon encountered an error. See output above." && exit 1) fi
    fi

    echo "Done!"
    
    exit 0
}

main
